<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/stylesheets/dashboard.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto&display=swap"
      rel="stylesheet"
    />
    <!-- Add Bootstrap's CSS file -->
    <link
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
    />

    <!-- Add Bootstrap's JavaScript files -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAdaCbAP6tXJ5zSGES45HyQmgd8ZzV3IO8&callback=initMap"
      async
      defer
    ></script>
    <title>Dashboard</title>
  </head>
  <body>
    <header>
      <nav class="navbar">
        <div class="logo-container">
          <img src="/images/image.png" alt="Logo" class="logo-circle" />
          <a href="/" class="logo">STORKS</a>
        </div>
        <!-- ... -->
        <ul class="nav-links">
          <li><a href="/favors-page">Favors</a></li>
          <li><a href="/rewards-page">Rewards</a></li>
          <li><a href="/profile-page">Profile</a></li>
        </ul>
        <div class="button-container">
          <button
            class="btn btn-primary"
            data-toggle="modal"
            data-target="#createTaskModal"
          >
            Create new task
          </button>

          <form action="/logout" method="POST" class="logout-form">
            <button type="submit" class="logout-btn">Logout</button>
          </form>
        </div>
        <!-- ... -->
      </nav>
    </header>

    <main>
      <section class="hero">
        <div class="hero-content">
          <h1>
            Welcome, <%= user.name.charAt(0).toUpperCase() + user.name.slice(1)
            %>!
          </h1>
          <p>Let's start accomplishing your tasks with STORKS.</p>
        </div>
      </section>

      <!-- HTML Modal for popup window 1-->

      <div class="modal fade" id="createTaskModal" tabindex="-1" role="dialog" aria-labelledby="createTaskModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="createTaskModalLabel">Create new task</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <form action="/marker" method="POST">
                <label for="marker-title">Name:</label>
                <input type="text" id="marker-name" name="marker-name" />
                <br />
                <label for="marker-phone">Phone Number:</label>
                <input type="text" id="marker-phone" name="marker-phone" />
                <br />
                <label for="marker-address">Address:</label>
                <input type="text" id="marker-address" name="marker-address" />
                <br />
                <label for="marker-description">What do you need help with?:</label>
                <input type="text" id="marker-description" name="marker-description" />
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Add Marker</button>  
              </form>
            </div>
            <div class="modal-footer">
      
            </div>
          </div>
        </div>
      </div>      
      
      <!--    ...    -->

      <div>
        <div id="map"></div>
      </div>
    </main>

    <script>
      // Percies edits
      const form = document.querySelector('form');
      const submitButton = document.querySelector('#add-marker-btn');

      submitButton.addEventListener('click', (e) => {
        e.preventDefault();

        const formData = new FormData(form);

        fetch('/marker', {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (response.ok) {
            console.log('Marker added successfully!');
            // do something after marker is added successfully
          } else {
            console.log('Error adding marker');
          }
        })
        .catch(error => {
          console.error('Error adding marker:', error);
        });
      });

      // Get user profile picture URL
      const userProfilePictureUrl =
        "<%= user.profilePicture ? user.profilePicture + '?t=' + Date.now() : '/images/default-img.png' %>";
      let userMarker;

      function initMap() {
        const mapOptions = {
          center: { lat: 25.757028, lng: -80.3732 },
          zoom: 17,
        };
        const map = new google.maps.Map(
          document.getElementById("map"),
          mapOptions
        );

        let userLocationMarker;

        const userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };// added

        // Function to update user location
        function updateUserLocation(position) {
          const userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          map.setCenter(userLocation);

          // User Location Marker
          if (!userMarker) {
            userMarker = new google.maps.Marker({
              position: userLocation,
              map: map,
              icon: {
                url: userProfilePictureUrl,
                scaledSize: new google.maps.Size(30, 30),
              },
            });
          } else {
            userMarker.setPosition(userLocation);
          }
        }

        // Get user's current location
        if (navigator.geolocation) {
          navigator.geolocation.watchPosition(updateUserLocation);
        } else {
          console.log("Geolocation is not supported by this browser.");
        }

        // Create a new marker and info window when the "Add Marker" button is clicked
        const addMarkerBtn2 = document.getElementById("add-marker-btn");
        addMarkerBtn2.addEventListener("click", function () {
          const name = document.getElementById("marker-title").value;
          const phoneNumber = document.getElementById("marker-phone").value;
          const address = document.getElementById("marker-address").value;
          const description =
            document.getElementById("marker-description").value;

          const favorsRef = db.ref("favors");
          favorsRef.on("child_added", (snapshot) => {
            const favorData = snapshot.val();
            const markerPosition = {
              lat: favorData.latitude,
              lng: favorData.longitude,
            };

            const infoWindowContent = `
              <div>
                <h4>${favorData.title}</h4>
                <p>Phone Number: ${favorData.phone}</p>
                <p>Address: ${favorData.address}</p>
                <p>What do you need help with?: ${favorData.description}</p>
              </div>
            `;

            const marker = new google.maps.Marker({
              position: map.markerPosition,
              map: map,
            });

            const infoWindow = new google.maps.InfoWindow({
              content: infoWindowContent,
            });

            marker.addListener("click", function () {
              infoWindow.open(map, marker);
            });

            infoWindow.open(map, marker);
          });
        });

        // Add click listener to add marker button
        const addMarkerBtn = document.getElementById("add-marker-btn");
        addMarkerBtn.addEventListener("click", function () {
          // Get marker info from modal inputs
          const markerTitle = document.getElementById("marker-title").value;
          const markerPhone = document.getElementById("marker-phone").value;
          const markerAddress = document.getElementById("marker-address").value;
          const markerDescription =
            document.getElementById("marker-description").value;
          // Create a new marker with the user's location
          const marker = new google.maps.Marker({
            position: userMarker.getPosition(),
            map: map,
            title: markerTitle,
          });

          // Create an info window for the marker
          const infoWindow = new google.maps.InfoWindow({
            content:
              `<h3>${markerTitle}</h3>` +
              `<p>Phone Number: ${markerPhone}</p>` +
              `<p>Address: ${markerAddress}</p>` +
              `<p>What do you need help with?: ${markerDescription}</p>`,
          });

          // Add click listener to the marker to open the info window
          marker.addListener("click", function () {
            infoWindow.open(map, marker);
          });
        });
      }
    </script>
  </body>
</html>
